#!/usr/bin/env python

import os
from rosetta import *
from rosetta.protocols.rigid import *
import structural_alignment

opts = ['app',
        '-database', os.path.abspath( os.environ['PYROSETTA_DATABASE'] ),
        '-ignore_unrecognized_res' ]
args = utility.vector1_string()
args.extend( opts )
core.init( args )


ap1_params = ['AP1.params']
type_set = generate_nonstandard_residue_set( ap1_params )
pose = pose_from_pdb( type_set, 'AP1_0001.pdb' )

tst_params = ['TST.params']
tst_type_set = generate_nonstandard_residue_set( tst_params )

tstpose = pose_from_pdb( tst_type_set, 'test.pdb')








#!/usr/bin/env python

import os
from rosetta import *
from rosetta.protocols.rigid import *
import structural_alignment

opts = ['app', 
        '-database', os.path.abspath( os.environ['PYROSETTA_DATABASE'] ), 
        '-ignore_unrecognized_res' ]

args = utility.vector1_string()
args.extend( opts )
core.init( args )


tst_type_set = generate_nonstandard_residue_set( ['TST.params'] )


# get ligand coordinates
ap1_type_set = generate_nonstandard_residue_set( ['AP1.params'] )
ap1 = pose_from_pdb(ap1_type_set, 'AP1_0001.pdb')
ap1_c33 = ap1.residue(1).atom('C33').xyz()
ap1_s1  = ap1.residue(1).atom('S1' ).xyz()
ap1_o9  = ap1.residue(1).atom('O9' ).xyz()
ap1_c29 = ap1.residue(1).atom('C29').xyz()
# listify
ap1_c33 = [ ap1_c33[0], ap1_c33[1], ap1_c33[2] ]
ap1_s1  = [ ap1_s1[0], ap1_s1[1], ap1_s1[2] ]
ap1_o9  = [ ap1_o9[0], ap1_o9[1], ap1_o9[2] ]
ap1_c29 = [ ap1_c29[0], ap1_c29[1], ap1_c29[2] ]

ap2_type_set = generate_nonstandard_residue_set( ['AP2.params'] )
ap2 = pose_from_pdb(ap2_type_set, 'AP2_0001.pdb')
ap2_c1  = ap2.residue(1).atom('C1' ).xyz()
ap2_s1  = ap2.residue(1).atom('S1' ).xyz()
ap2_o1  = ap2.residue(1).atom('O1' ).xyz()
ap2_c3  = ap2.residue(1).atom('C3' ).xyz()
# listify
ap2_c1  = [ ap2_c1[0], ap2_c1[1], ap2_c1[2] ]
ap2_s1  = [ ap2_s1[0], ap2_s1[1], ap2_s1[2] ]
ap2_o1  = [ ap2_o1[0], ap2_o1[1], ap2_o1[2] ]
ap2_c3  = [ ap2_c3[0], ap2_c3[1], ap2_c3[2] ]

ap3_type_set = generate_nonstandard_residue_set( ['AP3.params'] )
ap3 = pose_from_pdb(ap3_type_set, 'AP3_0001.pdb')
ap3_c1  = ap3.residue(1).atom('C1' ).xyz()
ap3_s1  = ap3.residue(1).atom('S1' ).xyz()
ap3_o1  = ap3.residue(1).atom('O1' ).xyz()
ap3_c3  = ap3.residue(1).atom('C3' ).xyz()
# listify
ap3_c1  = [ ap3_c1[0], ap3_c1[1], ap3_c1[2] ]
ap3_s1  = [ ap3_s1[0], ap3_s1[1], ap3_s1[2] ]
ap3_o1  = [ ap3_o1[0], ap3_o1[1], ap3_o1[2] ]
ap3_c3  = [ ap3_c3[0], ap3_c3[1], ap3_c3[2] ]



for filename in os.listdir('/home/deegupta/matching/matches_all'):
    filename = '/home/deegupta/matching/matches_all/'+filename

    with open(filename, 'r') as pdbfile:
        lines = pdbfile.readlines()
        for line in lines:
            terms = line.split()
            
            try:
                if terms[2]=='C1' and terms[3]=='TST' and terms[4]=='X':
                    tst_c1 = [ float(terms[6]), float(terms[7]), float(terms[8]) ]
                if terms[2]=='S1' and terms[3]=='TST' and terms[4]=='X':
                    tst_s1 = [ float(terms[6]), float(terms[7]), float(terms[8]) ]
                if terms[2]=='O1' and terms[3]=='TST' and terms[4]=='X':
                    tst_o1 = [ float(terms[6]), float(terms[7]), float(terms[8]) ]
                if terms[2]=='C2' and terms[3]=='TST' and terms[4]=='X':
                    tst_c2 = [ float(terms[6]), float(terms[7]), float(terms[8]) ]
                    break
            except:
                pass
    
    pose = pose_from_pdb( tst_type_set, filename )

    st1 = [   ap1_c33,
                                                            ap1_s1,
                                                            ap1_o9,
                                                            ap1_c29  ]
    st2 = [   tst_c1,
                                                            tst_s1,
                                                            tst_o1,
                                                            tst_c2   ]

    

    raw_input('.')
    ap1, pose = structural_alignment.kabsch_alignment(  ap1, 
                                                        pose, 
                                                        [   ap1_c33,
                                                            ap1_s1,
                                                            ap1_o9,
                                                            ap1_c29  ], 
                                                        [   tst_c1,
                                                            tst_s1,
                                                            tst_o1,
                                                            tst_c2   ] )


    print ap1
    print pose

    dump_pdb(ap1, 'ap1.pdb')
    dump_pdb(pose, 'pose.pdb')

    #system cat pepfile >> posefile

